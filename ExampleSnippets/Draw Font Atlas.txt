/*//static Ermine::Font fonttest("AgencyFb.ttf",80);
	auto FontCache = GlobalFontCache::Get();
	FontCache->SetFontSize(80);
	FontCache->LoadFontFromFile(std::filesystem::path("AgencyFb.ttf"));

	auto fonttest = (*FontCache)["AgencyFb"];

	//Start Draw Freetype-gl Font Atlas..
	//static Texture* Tex = new Texture("AnoHiMitaHana.png");
	//Tex->Bind();

	Ermine::Shader AtlasShader(std::filesystem::path("Shader/Vertex/DrawTextureAtlasToScreenVertexShader.vert"),
						   std::filesystem::path("Shader/Fragment/DrawTextureAtlasToScreenFragmentShader.frag"));

	float vertices[] = {
		// positions          // texture coords
		 0.5f,  0.5f, 0.0f,   1.0f, 1.0f, // top right
		 0.5f, -0.5f, 0.0f,   1.0f, 0.0f, // bottom right
		-0.5f, -0.5f, 0.0f,   0.0f, 0.0f, // bottom left
		-0.5f,  0.5f, 0.0f,   0.0f, 1.0f  // top left 
	};
	unsigned int indices[] = {
		0, 1, 3, // first triangle
		1, 2, 3  // second triangle
	};
	unsigned int VBO, VAO, EBO;
	glGenVertexArrays(1, &VAO);
	glGenBuffers(1, &VBO);
	glGenBuffers(1, &EBO);

	glBindVertexArray(VAO);

	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

	// position attribute
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	
	// texture coord attribute
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, fonttest->FontTexture->atlas->id);//fonttest.FontAtlas->id);
	glBindVertexArray(VAO);
	AtlasShader.Bind();

	AtlasShader.Uniformi("texture1", 0);

	glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);
	glDeleteBuffers(1, &EBO);
	//Ended Draw Freetype-gl Font Atlas..*/