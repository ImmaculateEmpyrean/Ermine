/*void Renderer2D::DrawActorsHelper()
	{
		auto Renderer = Ermine::Renderer2D::Get();

		Renderer->Actor2DShader->Bind();

		for (auto i : Renderer->StowedActors)
		{
			VertexArray Vao(i->GetModelSpaceCoordinates(), Actor2D::GetModelSpaceIndices());
			Vao.Bind();

			static std::vector<VertexAttribPointerSpecification> Spec = {
				{3,GL_FLOAT,false},
				{3,GL_FLOAT,false},
				{2,GL_FLOAT,false}
			};
			Vao.SetVertexAttribArray(Spec);

			Vao.Bind();

			glm::mat4 ModelMatrix = i->GetModelMatrix();
			Renderer->Actor2DShader->UniformMat4(std::string("ModelMatrix"), ModelMatrix);
			Renderer->Actor2DShader->UniformMat4(std::string("ProjectionViewMatrix"), Renderer->ProjectionViewMatrix);

			int BindSlot = GlobalTextureCache::Get()->Bind(i->GetSprite()->GetTexture());
			Renderer->Actor2DShader->Uniformi(std::string("texture1"), BindSlot);

			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
		}

		Renderer->StowedActors.clear();
	}

	void Renderer2D::DrawTileMapHelper()
	{
		auto Renderer = Ermine::Renderer2D::Get();

		std::vector<Ermine::VertexArray> VaoArray;
		std::vector<std::unordered_map<std::filesystem::path, float>> TextureMappingCache;

		for (auto map : Renderer->StowedTileMaps)
		{
			auto DrawPrimitive = map->RendererFriendlyDrawable;

			for (int i = 0; i < DrawPrimitive.GetNumberOfLayersStored(); i++)
			{
				Ermine::VertexArray* Vao = DrawPrimitive.GetVao(i);
				std::unordered_map<std::filesystem::path, float> TextureToNumberInVaoMapper = DrawPrimitive.GetTextureToNumberCache(i);

				Renderer->TileMapShader->Bind();
				Vao->Bind();

				Vao->SetVertexAttribArray({
				{3,GL_FLOAT,false},
				{2,GL_FLOAT,false},
				{1,GL_FLOAT,false}
				});

				static glm::mat4 ProjectionViewMatrix = glm::ortho<float>(0.0f,((float)Ermine::GetScreenWidth()),((float)Ermine::GetScreenHeight()), 0.0f, -5.0f, 5.0f);

				Renderer->TileMapShader->UniformMat4(std::string("ProjectionViewMatrix"), ProjectionViewMatrix); //Here See That The Projection MAtrix Is Akin To Screen Coordinates..

				auto TextureCacheGlobal = Ermine::GlobalTextureCache::Get();
				std::vector<float> TextureMappingUnits;
				TextureMappingUnits.resize(16);

				for (int i = 0; i < 16; i++)
					TextureMappingUnits[i] = 0.0f;

				for (auto i = TextureToNumberInVaoMapper.begin(); i != TextureToNumberInVaoMapper.end(); i++)
				{
					std::shared_ptr<Texture> Tex = TextureCacheGlobal->GetTextureFromFile(i->first);
					int BoundSlot = TextureCacheGlobal->Bind(Tex);

					TextureMappingUnits[(int)i->second] = BoundSlot;
				}
				
				Renderer->TileMapShader->UniformNf(std::string("Sampler2DArray"),TextureMappingUnits);

				GLCall(glDrawElements(GL_TRIANGLES, Vao->GetIndexBufferLength(), GL_UNSIGNED_INT, 0));
			}
		}
		Renderer->StowedTileMaps.clear();
	}*/