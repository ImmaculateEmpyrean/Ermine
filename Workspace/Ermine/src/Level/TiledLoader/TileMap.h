#pragma once
#include<iostream>
#include<vector>
#include<string>

#include<fstream>
#include<filesystem>

#include "TileMapLayer.h"

namespace Ermine
{
	class TiledLoader;

	class TileMap
	{
	protected:
		//The TileMap Is Only To Be Generated By The Loader And Under No Circumstance By The USer.. It Simply Does Not Need To Be Genrated By The User Ever..
		TileMap(std::string Name,std::vector<std::shared_ptr<Ermine::TileMapLayer>> Layers);

	public:
		//The Destructor Is Made Visrtual For Future Proofing.. We Shall See What Happens As It Happens..
		virtual ~TileMap();

	public:
		static std::shared_ptr<Ermine::TileMap> Generate(std::string Name, std::vector<std::shared_ptr<Ermine::TileMapLayer>> Layers);

	public:
		std::shared_ptr<Ermine::TileMapLayer>& GetLayer(int Index);
		std::vector<std::shared_ptr<Ermine::TileMapLayer>> GetLayers(int StartIndex, int EndIndex);
		std::vector<std::shared_ptr<Ermine::TileMapLayer>> GetLayers();

		void DeleteLayerFromTileMap(int LayerNumber);

		std::vector<std::shared_ptr<Ermine::TileSet>>& GetTilesetBuffer();
		void AddTileSet(std::shared_ptr<Ermine::TileSet> TileSet);

		std::shared_ptr<Ermine::Sprite> GetTileSprite(int LayerNumber,int X,int Y);

	private:
		void AddLayerToBack (std::shared_ptr<Ermine::TileMapLayer> LayerToAdd); 
		void AddLayerToFront(std::shared_ptr<Ermine::TileMapLayer> LayerToAdd); 
		void AddLayerAtIndex(int indexNumber, std::shared_ptr<Ermine::TileMapLayer> LayerToAdd);

		void AddLayersToBack   (std::vector<std::shared_ptr<Ermine::TileMapLayer>> LayersToAdd);
		void AddLayersToFront  (std::vector<std::shared_ptr<Ermine::TileMapLayer>> LayersToAdd);
		void AddLayersFromIndex(int indexNumber, std::vector<std::shared_ptr<Ermine::TileMapLayer>> LayersToAdd);

	private:
		std::string TileMapName;
		std::vector<std::shared_ptr<Ermine::TileMapLayer>> Layers;

		//A TileMap Is Responsible For Its TileSets And Is Said To Own A TileSet.. This Is Arranged In Increasing Order Of Start Indexes
		std::vector<std::shared_ptr<TileSet>> TileSetsBuffer;

		friend class Ermine::TiledLoader;
	};
}